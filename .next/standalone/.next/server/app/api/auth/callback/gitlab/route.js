(()=>{var e={};e.id=148,e.ids=[148],e.modules={96330:e=>{"use strict";e.exports=require("@prisma/client")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},36939:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>U,routeModule:()=>p,serverHooks:()=>g,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>h});var a={};t.r(a),t.d(a,{GET:()=>l});var s=t(42706),i=t(28203),o=t(45994),n=t(39187),c=t(45369),u=t(44512);async function l(e){try{let{searchParams:r}=new URL(e.url),t=r.get("code");r.get("state");let a=r.get("error");if(a)return n.NextResponse.redirect(`${process.env.NEXTAUTH_URL}/auth/error?error=${a}`);if(!t)return n.NextResponse.redirect(`${process.env.NEXTAUTH_URL}/auth/error?error=missing_code`);let s=await c.U.exchangeCodeForToken(t),i=await c.U.getUserInfo(s.access_token),o=await c.U.createOrUpdateUser(i);return(await (0,u.UL)()).set("session-token",o.id,{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:2592e3}),n.NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard`)}catch(e){return console.error("Error in GitLab callback:",e),n.NextResponse.redirect(`${process.env.NEXTAUTH_URL}/auth/error?error=callback_failed`)}}let p=new s.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/auth/callback/gitlab/route",pathname:"/api/auth/callback/gitlab",filename:"route",bundlePath:"app/api/auth/callback/gitlab/route"},resolvedPagePath:"/workspace/app/api/auth/callback/gitlab/route.ts",nextConfigOutput:"standalone",userland:a}),{workAsyncStorage:d,workUnitAsyncStorage:h,serverHooks:g}=p;function U(){return(0,o.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:h})}},96487:()=>{},78335:()=>{},45369:(e,r,t)=>{"use strict";t.d(r,{U:()=>c});var a=t(96330);let s=globalThis.prisma??new a.PrismaClient,i=process.env.GITLAB_HOST||"https://gitlab.sonod.tech",o=process.env.GITLAB_CLIENT_ID,n=process.env.GITLAB_CLIENT_SECRET;process.env.NEXTAUTH_SECRET;class c{static getAuthUrl(){let e=new URLSearchParams({client_id:o,redirect_uri:`${process.env.NEXTAUTH_URL}/api/auth/callback/gitlab`,response_type:"code",scope:"read_user read_api api",state:this.generateState()});return`${i}/oauth/authorize?${e.toString()}`}static async exchangeCodeForToken(e){let r=await fetch(`${i}/oauth/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:o,client_secret:n,code:e,grant_type:"authorization_code",redirect_uri:`${process.env.NEXTAUTH_URL}/api/auth/callback/gitlab`})});if(!r.ok)throw Error("Failed to exchange code for token");return r.json()}static async getUserInfo(e){let r=await fetch(`${i}/api/v4/user`,{headers:{Authorization:`Bearer ${e}`}});if(!r.ok)throw Error("Failed to fetch user info");return r.json()}static async createOrUpdateUser(e){let r={gitlabId:e.id.toString(),name:e.name,email:e.email,image:e.avatar_url,role:"USER"};return await s.user.upsert({where:{gitlabId:e.id.toString()},update:r,create:r})}static generateState(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}static async getSession(e){try{let r=await s.user.findUnique({where:{id:e}});if(!r)return null;return{user:r,expires:new Date(Date.now()+2592e6).toISOString()}}catch(e){return console.error("Error getting session:",e),null}}}}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[989,452,512],()=>t(36939));module.exports=a})();