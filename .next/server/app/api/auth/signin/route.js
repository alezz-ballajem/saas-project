(()=>{var e={};e.id=957,e.ids=[957],e.modules={96330:e=>{"use strict";e.exports=require("@prisma/client")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},68696:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>g,routeModule:()=>p,serverHooks:()=>h,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>l});var a={};r.r(a),r.d(a,{GET:()=>c});var n=r(42706),s=r(28203),i=r(45994),o=r(39187),u=r(45369);async function c(e){try{let e=u.U.getAuthUrl();return o.NextResponse.redirect(e)}catch(e){return console.error("Error generating auth URL:",e),o.NextResponse.json({error:"Authentication failed"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/auth/signin/route",pathname:"/api/auth/signin",filename:"route",bundlePath:"app/api/auth/signin/route"},resolvedPagePath:"/workspace/app/api/auth/signin/route.ts",nextConfigOutput:"standalone",userland:a}),{workAsyncStorage:d,workUnitAsyncStorage:l,serverHooks:h}=p;function g(){return(0,i.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:l})}},96487:()=>{},78335:()=>{},45369:(e,t,r)=>{"use strict";r.d(t,{U:()=>u});var a=r(96330);let n=globalThis.prisma??new a.PrismaClient,s=process.env.GITLAB_HOST||"https://gitlab.sonod.tech",i=process.env.GITLAB_CLIENT_ID,o=process.env.GITLAB_CLIENT_SECRET;process.env.NEXTAUTH_SECRET;class u{static getAuthUrl(){let e=new URLSearchParams({client_id:i,redirect_uri:`${process.env.NEXTAUTH_URL}/api/auth/callback/gitlab`,response_type:"code",scope:"read_user read_api api",state:this.generateState()});return`${s}/oauth/authorize?${e.toString()}`}static async exchangeCodeForToken(e){let t=await fetch(`${s}/oauth/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:i,client_secret:o,code:e,grant_type:"authorization_code",redirect_uri:`${process.env.NEXTAUTH_URL}/api/auth/callback/gitlab`})});if(!t.ok)throw Error("Failed to exchange code for token");return t.json()}static async getUserInfo(e){let t=await fetch(`${s}/api/v4/user`,{headers:{Authorization:`Bearer ${e}`}});if(!t.ok)throw Error("Failed to fetch user info");return t.json()}static async createOrUpdateUser(e){let t={gitlabId:e.id.toString(),name:e.name,email:e.email,image:e.avatar_url,role:"USER"};return await n.user.upsert({where:{gitlabId:e.id.toString()},update:t,create:t})}static generateState(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}static async getSession(e){try{let t=await n.user.findUnique({where:{id:e}});if(!t)return null;return{user:t,expires:new Date(Date.now()+2592e6).toISOString()}}catch(e){return console.error("Error getting session:",e),null}}}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[989,452],()=>r(68696));module.exports=a})();